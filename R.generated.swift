//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Roboto-Medium.ttf`.
    static let robotoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Medium", pathExtension: "ttf")

    /// `bundle.url(forResource: "Roboto-Medium", withExtension: "ttf")`
    static func robotoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")

    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }

    static func validate() throws {
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'Roboto-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.button` struct is generated, and contains static references to 2 localization keys.
    struct button {
      /// Value: Back
      static let back = Rswift.StringResource(key: "back", tableName: "Button", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reload
      static let reload = Rswift.StringResource(key: "reload", tableName: "Button", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Back
      static func back(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("back", tableName: "Button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Button", preferredLanguages: preferredLanguages) else {
          return "back"
        }

        return NSLocalizedString("back", tableName: "Button", bundle: bundle, comment: "")
      }

      /// Value: Reload
      static func reload(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("reload", tableName: "Button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Button", preferredLanguages: preferredLanguages) else {
          return "reload"
        }

        return NSLocalizedString("reload", tableName: "Button", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.title` struct is generated, and contains static references to 9 localization keys.
    struct title {
      /// Value: Amount
      static let amount = Rswift.StringResource(key: "amount", tableName: "Title", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Coins-Lite
      static let coinsLite = Rswift.StringResource(key: "coins.lite", tableName: "Title", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Details:
      static let details = Rswift.StringResource(key: "details", tableName: "Title", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: History
      static let history = Rswift.StringResource(key: "history", tableName: "Title", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My Wallets
      static let myWallets = Rswift.StringResource(key: "my.wallets", tableName: "Title", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Receiver
      static let receiver = Rswift.StringResource(key: "receiver", tableName: "Title", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sender
      static let sender = Rswift.StringResource(key: "sender", tableName: "Title", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You've cashed out to %@
      static let youHaveCashedOutTo = Rswift.StringResource(key: "you.have.cashed.out.to", tableName: "Title", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You've received payment
      static let youHaveReceivedPayment = Rswift.StringResource(key: "you.have.received.payment", tableName: "Title", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Amount
      static func amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("amount", tableName: "Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Title", preferredLanguages: preferredLanguages) else {
          return "amount"
        }

        return NSLocalizedString("amount", tableName: "Title", bundle: bundle, comment: "")
      }

      /// Value: Coins-Lite
      static func coinsLite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("coins.lite", tableName: "Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Title", preferredLanguages: preferredLanguages) else {
          return "coins.lite"
        }

        return NSLocalizedString("coins.lite", tableName: "Title", bundle: bundle, comment: "")
      }

      /// Value: Details:
      static func details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("details", tableName: "Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Title", preferredLanguages: preferredLanguages) else {
          return "details"
        }

        return NSLocalizedString("details", tableName: "Title", bundle: bundle, comment: "")
      }

      /// Value: History
      static func history(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("history", tableName: "Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Title", preferredLanguages: preferredLanguages) else {
          return "history"
        }

        return NSLocalizedString("history", tableName: "Title", bundle: bundle, comment: "")
      }

      /// Value: My Wallets
      static func myWallets(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("my.wallets", tableName: "Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Title", preferredLanguages: preferredLanguages) else {
          return "my.wallets"
        }

        return NSLocalizedString("my.wallets", tableName: "Title", bundle: bundle, comment: "")
      }

      /// Value: Receiver
      static func receiver(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("receiver", tableName: "Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Title", preferredLanguages: preferredLanguages) else {
          return "receiver"
        }

        return NSLocalizedString("receiver", tableName: "Title", bundle: bundle, comment: "")
      }

      /// Value: Sender
      static func sender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sender", tableName: "Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Title", preferredLanguages: preferredLanguages) else {
          return "sender"
        }

        return NSLocalizedString("sender", tableName: "Title", bundle: bundle, comment: "")
      }

      /// Value: You've cashed out to %@
      static func youHaveCashedOutTo(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("you.have.cashed.out.to", tableName: "Title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Title", preferredLanguages: preferredLanguages) else {
          return "you.have.cashed.out.to"
        }

        let format = NSLocalizedString("you.have.cashed.out.to", tableName: "Title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: You've received payment
      static func youHaveReceivedPayment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("you.have.received.payment", tableName: "Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Title", preferredLanguages: preferredLanguages) else {
          return "you.have.received.payment"
        }

        return NSLocalizedString("you.have.received.payment", tableName: "Title", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
